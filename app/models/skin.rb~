require 'zip/zip'
require 'zip/zipfilesystem'

class Skin < ActiveRecord::Base
	has_attached_file :image, :styles => { :thumb => "100x100", :medium => "300x300", :large => "500x500" }
	has_attached_file :archive, :path => ":rails_root/lib/:class/:attachment/:id/:basename.:extension", :url => ":rails_root/lib/:class/:attachment/:id/:basename.:extension"

	def unzip_and_process_skin
		#archive_name = self.archive_file_name.delete('.zip')
		archive_name = self.archive_file_name.chomp(File.extname(self.archive_file_name))		
		archive = Zip::ZipFile.open(self.archive.path, Zip::ZipFile::CREATE)
		conf = YAML::parse(archive.read("#{archive_name}/#{archive_name}.yml"))

		# Open a copy of the skin shot and "paperclip" it to our skin model
		skin_shot_path = File::join RAILS_ROOT, "public", "images", "admin", "skin_shots"
		img = File.new("#{skin_shot_path}/#{archive_name}.png", "w+")
		img << archive.read("#{archive_name}/#{archive_name}.png")
		self.image = img
		self.name = conf.select("/name")[0].value
		self.description = conf.select("/description")[0].value
		self.save!
		File.delete(img.path)
	end

	def activate_on(site, user)
		
		archive_name = self.archive_file_name.chomp(File.extname(self.archive_file_name))		
		archive = Zip::ZipFile.open(self.archive.path, Zip::ZipFile::CREATE)			


		# Create the default layout
		layout = Layout.new(
			:name => "#{archive_name}", 
			:content => archive.read("#{archive_name}/layout.html"),
			:site_id => site.id, 
			:created_by_id => user.id
		)
		
		# Create the style layout
		style = Layout.new(
			:name => "stylesheet", 
			:content => '<r:content />', 
			:content_type => 'text/css', 
			:site_id => site.id,
			:created_by_id => user.id
		)

		layout.save!
		style.save!

		# Extract skin zip contents. We will remove this folder when were done.
		extract_point = File::join RAILS_ROOT, "lib", "skins", "extracts"
		archive.each { |e|
				fpath = File.join(extract_point, e.name)
				FileUtils.mkdir_p(File.dirname(fpath))
				archive.extract(e, fpath)
		}

		# Create a default homepage and stylesheet
		homepage = Page.new
		stylesheet = Page.new
		# Create a home page
		if Page.exists?(:site_id => site.id)
			Page.find_each(:conditions => ["site_id = ?", site.id]) do |page|
				page.layout_id = layout.id
				page.save!
				homepage = page
			end

			stylesheet.title = "style"
			stylesheet.layout_id = style.id
			stylesheet.slug = 'style.css'
			stylesheet.breadcrumb = "style"
			stylesheet.description = ''
			stylesheet.keywords = ''
			stylesheet.created_by_id = user.id
			stylesheet.status_id = 100
			stylesheet.site_id = site.id
			stylesheet.parent_id = homepage.id
			stylesheet.save!	
		else
			homepage.title = 'Home'
			homepage.layout_id = layout.id
			homepage.slug = '/'
			homepage.breadcrumb = "Home"
			homepage.description = ''
			homepage.keywords = ''
			homepage.created_by_id = user.id
			homepage.status_id = 100
			homepage.site_id = site.id
			homepage.save!

			stylesheet.title = "style"
			stylesheet.layout_id = style.id
			stylesheet.slug = 'style.css'
			stylesheet.breadcrumb = "style"
			stylesheet.description = ''
			stylesheet.keywords = ''
			stylesheet.created_by_id = user.id
			stylesheet.status_id = 100
			stylesheet.site_id = site.id
			stylesheet.parent_id = homepage.id
			stylesheet.save!			

			# Create the page parts
			Dir.foreach("#{extract_point}/#{archive_name}/parts") { |part|
				next if part == '.'
				next if part == '..'
				File.open("#{extract_point}/#{archive_name}/parts/#{part}", "r") do |file|
					contents = ""
					while line = file.gets
						contents << line
					end
				
					part = PagePart.new(
						:name => part.chomp(File.extname(part)),
						:content => contents,
						:page_id => homepage.id
					)
					part.save!
				end
			}

			# Create page snippets
			Dir.foreach("#{extract_point}/#{archive_name}/snippets") { |snippet|
				next if snippet == '.'
				next if snippet == '..'
				File.open("#{extract_point}/#{archive_name}/snippets/#{snippet}", "r") do |file|
					contents = ""
					while line = file.gets
						contents << line
					end
			
					snippet = Snippet.new(
						:name => snippet.chomp(File.extname(snippet)),
						:content => contents,
						:site_id => site.id,
						:created_by_id => user.id
					)
					snippet.save!
				end
			}

			# Add Skin images to assets
			Dir.foreach("#{extract_point}/#{archive_name}/images") { |image|
				next if image == '.'
				next if image == '..'
				img = File.open("#{extract_point}/#{archive_name}/images/#{image}", "r")
				asset = Asset.new
				asset.asset = img
				asset.title = image.chomp(File.extname(image))
				asset.created_by_id = user.id
				asset.site_id = site.id
			}
	
		end

		# Create a page part for style
		File.open("#{extract_point}/#{archive_name}/#{archive_name}.css", "r") do |file|
			contents = ""
			while line = file.gets
				contents << line
			end
			part = PagePart.new(
				:name => 'body',
				:content => contents,
				:page_id => stylesheet.id
			)
			part.save!
		end

		# Remove skin zip content
		FileUtils.rm_r("#{extract_point}/#{archive_name}")
	end

	def deactivate_on(site)
		Layout.delete_all(["site_id = ? AND name = ?", site.id, "#{self.name.downcase}"])
		Layout.delete_all(["site_id = ? AND name = ?", site.id, "stylesheet"])

		pages = Page.find(:all, :conditions => ["site_id = ?", site.id])
		pages.each { |page|
			page.layout_id = ''
			page.save!
			if page.title == 'style'
				Page.delete(page.id)
			end
		}
	end
end
